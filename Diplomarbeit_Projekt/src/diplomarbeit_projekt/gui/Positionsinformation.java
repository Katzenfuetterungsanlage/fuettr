/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diplomarbeit_projekt.gui;

import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.pi4j.io.gpio.GpioPinDigitalInput;
import com.pi4j.io.gpio.GpioPinDigitalOutput;
import com.pi4j.io.gpio.PinPullResistance;
import com.pi4j.io.gpio.PinState;
import com.pi4j.io.gpio.RaspiPin;
import java.util.List;
import javax.swing.SwingWorker;

/**
 *
 * @author Florian
 */

/*
    Notification:
    sensor1: bowl
        GPIO_00
    sensor2: conveyor belt - feed bag
        GPIO_01
    engine1: bowl
        Transistor_1.1 GPIO_02
        Transistor_1.2 GPIO_03
        Transistor_1.3 GPIO_04
        Transistor_1.4 GPIO_05
    engine2: conveyor belt - feed bag
        Transistor_2.1 GPIO_06
        Transistor_2.2 GPIO_10
        Transistor_2.3 GPIO_08
        Transistor_2.4 GPIO_09

    1-4 -> clockwise
    2-3 -> counterclockwise

    transistor is active when voltage is supplied => pin state = high
    sensor return high when the object is in front of it
*/

public class Positionsinformation extends javax.swing.JDialog
{
    Boolean stop = false;
    
    // create gpio controller
    final GpioController gpio = GpioFactory.getInstance();
    
    /**
     * Creates new form Positionsinformation
     */
    public Positionsinformation(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
               
        initComponents();
         
        setLocationRelativeTo(parent);
        pack();

        // Workers
        // Workers will stop when Button "Schließen"/close is pressed and stop = true
        Sensor1PositionWorker sensor1PositionWorker = new Sensor1PositionWorker();
        sensor1PositionWorker.execute();
        
        Sensor2PositionWorker sensor2PositionWorker = new Sensor2PositionWorker();
        sensor2PositionWorker.execute();
        
        Engine1PositionWorker engine1PositionWorker = new Engine1PositionWorker();
        engine1PositionWorker.execute();
        
        Engine2PositionWorker engine2PositionWorker = new Engine2PositionWorker();
        engine2PositionWorker.execute();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        pButton = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btSchließen = new javax.swing.JButton();
        pPosInfo = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        pMotor1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        lbEngine1 = new javax.swing.JLabel();
        pMotor2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        lbEngine2 = new javax.swing.JLabel();
        pSensor1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        lbSensor1 = new javax.swing.JLabel();
        pSensor2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        lbSensor2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Positionsinformation");

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        jPanel1.setLayout(new java.awt.BorderLayout());

        pButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 0, 0, 0));
        pButton.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        btSchließen.setText("Schließen");
        btSchließen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onSchließen(evt);
            }
        });
        jPanel5.add(btSchließen);

        jPanel4.add(jPanel5);

        pButton.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel1.add(pButton, java.awt.BorderLayout.SOUTH);

        pPosInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pPosInfo.setLayout(new java.awt.BorderLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 16, 32));

        jPanel2.setLayout(new java.awt.GridLayout(4, 0));

        pMotor1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Motor 1");
        pMotor1.add(jLabel1, java.awt.BorderLayout.NORTH);

        jPanel9.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel7.setLayout(new java.awt.GridLayout(1, 0, 8, 0));

        lbEngine1.setText("Pos1");
        jPanel7.add(lbEngine1);

        jPanel9.add(jPanel7);

        pMotor1.add(jPanel9, java.awt.BorderLayout.CENTER);

        jPanel2.add(pMotor1);

        pMotor2.setLayout(new java.awt.BorderLayout());

        jLabel4.setText("Motor 2");
        pMotor2.add(jLabel4, java.awt.BorderLayout.NORTH);

        jPanel17.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel8.setLayout(new java.awt.GridLayout(1, 0, 8, 0));

        lbEngine2.setText("Pos1");
        jPanel8.add(lbEngine2);

        jPanel17.add(jPanel8);

        pMotor2.add(jPanel17, java.awt.BorderLayout.CENTER);

        jPanel2.add(pMotor2);

        pSensor1.setLayout(new java.awt.BorderLayout());

        jLabel9.setText("Sensor 1");
        pSensor1.add(jLabel9, java.awt.BorderLayout.NORTH);

        jPanel18.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel19.setLayout(new java.awt.GridLayout(1, 0, 8, 0));

        lbSensor1.setText("(nicht)betätigt");
        jPanel19.add(lbSensor1);

        jPanel18.add(jPanel19);

        pSensor1.add(jPanel18, java.awt.BorderLayout.CENTER);

        jPanel2.add(pSensor1);

        pSensor2.setLayout(new java.awt.BorderLayout());

        jLabel12.setText("Sensor 2");
        pSensor2.add(jLabel12, java.awt.BorderLayout.NORTH);

        jPanel20.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jPanel21.setLayout(new java.awt.GridLayout(1, 0, 8, 0));

        lbSensor2.setText("(nicht)betätigt");
        jPanel21.add(lbSensor2);

        jPanel20.add(jPanel21);

        pSensor2.add(jPanel20, java.awt.BorderLayout.CENTER);

        jPanel2.add(pSensor2);

        jPanel3.add(jPanel2);

        pPosInfo.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel1.add(pPosInfo, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onSchließen(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onSchließen
    {//GEN-HEADEREND:event_onSchließen
        stop = false; //stops all PositionWorkers
        gpio.shutdown();
        dispose();
    }//GEN-LAST:event_onSchließen

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Positionsinformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Positionsinformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Positionsinformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Positionsinformation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                Positionsinformation dialog = new Positionsinformation(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSchließen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel lbEngine1;
    private javax.swing.JLabel lbEngine2;
    private javax.swing.JLabel lbSensor1;
    private javax.swing.JLabel lbSensor2;
    private javax.swing.JPanel pButton;
    private javax.swing.JPanel pMotor1;
    private javax.swing.JPanel pMotor2;
    private javax.swing.JPanel pPosInfo;
    private javax.swing.JPanel pSensor1;
    private javax.swing.JPanel pSensor2;
    // End of variables declaration//GEN-END:variables

    private class Sensor1PositionWorker extends SwingWorker<Object, String>
    {   
        String strSensor1;
        
        @Override
        protected Object doInBackground() throws Exception
        {
            // sensor1: bowl -> GPIO_00
            final GpioPinDigitalInput pin00 = gpio.provisionDigitalInputPin(RaspiPin.GPIO_00,PinPullResistance.PULL_DOWN);
            pin00.setShutdownOptions(true);
                        
            while (stop != true)
            {
                if(pin00.getState() == PinState.HIGH)
                    strSensor1 = "Betätigt";
                else
                    strSensor1 = "Unbetätigt";
                
                publish(strSensor1);
            } 
            return 1;            
        }

        @Override
        protected void process(List<String> chunks)
        {
            if (stop != true)
                lbSensor1.setText(strSensor1);
        }  
    }

    private class Sensor2PositionWorker extends SwingWorker<Object, String>
    {   
        String strSensor2;
        
        @Override
        protected Object doInBackground() throws Exception
        {
            // sensor2: conveyor belt - feed bag -> GPIO_01
            final GpioPinDigitalInput pin01 = gpio.provisionDigitalInputPin(RaspiPin.GPIO_01,PinPullResistance.PULL_DOWN);
            pin01.setShutdownOptions(true);
                        
            while (stop != true)
            {
                if(pin01.getState() == PinState.HIGH)
                    strSensor2 = "Betätigt";
                else
                    strSensor2 = "Unbetätigt";
                
                publish(strSensor2);
            }
            return 1;
        }

        @Override
        protected void process(List<String> chunks)
        {
            if (stop != true)
                lbSensor2.setText(strSensor2);
        }  
    }
    
    private class Engine1PositionWorker extends SwingWorker<Object, String>
    {   
        String strEngine1;
        
        @Override
        protected Object doInBackground() throws Exception
        {
            // engine1: bowl -> Transistor_1.1 -> GPIO_02
            final GpioPinDigitalOutput pin02 = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_02  ,PinState.LOW);
            pin02.setShutdownOptions(true, PinState.LOW);
        
            // engine1: bowl -> Transistor_1.2 -> GPIO_03
            final GpioPinDigitalOutput pin03 = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_03  ,PinState.LOW);
            pin03.setShutdownOptions(true, PinState.LOW);
        
            // engine1: bowl -> Transistor_1.3 -> GPIO_04
            final GpioPinDigitalOutput pin04 = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_04  ,PinState.LOW);
            pin04.setShutdownOptions(true, PinState.LOW);
        
            // engine1: bowl -> Transistor_1.4 -> GPIO_05
            final GpioPinDigitalOutput pin05 = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_05  ,PinState.LOW);
            pin05.setShutdownOptions(true, PinState.LOW);
                        
            while (stop != true)
            {
                if (pin02.getState() == PinState.HIGH && pin05.getState() == PinState.HIGH)
                    strEngine1 = "Dreht im Uhrzeigersinn";
                else
                    if (pin03.getState() == PinState.HIGH && pin04.getState() == PinState.HIGH)
                        strEngine1 = "Dreht gegen Uhrzeigersin";
                    else
                        strEngine1 = "Motor steht still";
                
                publish(strEngine1);
            }
            return 1;
        }

        @Override
        protected void process(List<String> chunks)
        {
            if (stop != true)
                lbEngine1.setText(strEngine1);
        }  
    }
    
    private class Engine2PositionWorker extends SwingWorker<Object, String>
    {   
        String strEngine2;
        
        @Override
        protected Object doInBackground() throws Exception
        {
            // engine2: conveyor belt - feed bag -> Transistor_2.1 -> GPIO_06
            final GpioPinDigitalOutput pin06 = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_06  ,PinState.LOW);
            pin06.setShutdownOptions(true, PinState.LOW);
        
            // engine2: conveyor belt - feed bag -> Transistor_2.2 -> GPIO_07
            final GpioPinDigitalOutput pin07 = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_10  ,PinState.LOW); // use GPIO_10 instead of GPIO_7 because of error
            pin07.setShutdownOptions(true, PinState.LOW);
        
            // engine2: conveyor belt - feed bag -> Transistor_2.3 -> GPIO_08
            final GpioPinDigitalOutput pin08 = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_08  ,PinState.LOW);
            pin08.setShutdownOptions(true, PinState.LOW);
        
            // engine2: conveyor belt - feed bag -> Transistor_2.4 -> GPIO_09
            final GpioPinDigitalOutput pin09 = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_09  ,PinState.LOW);
            pin09.setShutdownOptions(true, PinState.LOW);
                        
            while (stop != true)
            {
                if (pin06.getState() == PinState.HIGH && pin09.getState() == PinState.HIGH)
                    strEngine2 = "Dreht im Uhrzeigersinn";
                else
                    if (pin07.getState() == PinState.HIGH && pin08.getState() == PinState.HIGH)
                        strEngine2 = "Dreht gegen Uhrzeigersin";
                    else
                        strEngine2 = "Motor steht still";
                
                publish(strEngine2);
            }
            return 1;
        }

        @Override
        protected void process(List<String> chunks)
        {
            if (stop != true)
                lbEngine2.setText(strEngine2);
        }  
    }
  
}
