/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diplomarbeit_projekt.gui;

import com.mongodb.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.json.JsonObject;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;

/**
 *
 * @author Florian
 */
public class TimeManagement extends javax.swing.JDialog
{
    private boolean saved = false;
    private boolean timesChanged = false;
    private BasicDBObject newTimeDoc;

    /**
     * Creates new form ZeitenManagemeint
     */
    public TimeManagement(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);

        initComponents();

        JSpinner.DateEditor at1 = new JSpinner.DateEditor(spTime1, "HH:mm");
        spTime1.setEditor(at1);

        JSpinner.DateEditor at2 = new JSpinner.DateEditor(spTime2, "HH:mm");
        spTime2.setEditor(at2);

        JSpinner.DateEditor at3 = new JSpinner.DateEditor(spTime3, "HH:mm");
        spTime3.setEditor(at3);

        JSpinner.DateEditor at4 = new JSpinner.DateEditor(spTime4, "HH:mm");
        spTime4.setEditor(at4);

        fillSpinners();

        setLocationRelativeTo(parent);
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        pButton = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btSpeichern = new javax.swing.JButton();
        btSchließen = new javax.swing.JButton();
        pZeiten = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        Date date1 = new Date();
        SpinnerDateModel sm1 =
        new SpinnerDateModel(date1, null, null, Calendar.HOUR_OF_DAY);
        spTime1 = new javax.swing.JSpinner(sm1);
        Date date2 = new Date();
        SpinnerDateModel sm2 =
        new SpinnerDateModel(date2, null, null, Calendar.HOUR_OF_DAY);
        spTime2 = new javax.swing.JSpinner(sm2);
        Date date3 = new Date();
        SpinnerDateModel sm3 =
        new SpinnerDateModel(date3, null, null, Calendar.HOUR_OF_DAY);
        spTime3 = new javax.swing.JSpinner(sm3);
        Date date4 = new Date();
        SpinnerDateModel sm4 =
        new SpinnerDateModel(date4, null, null, Calendar.HOUR_OF_DAY);
        spTime4 = new javax.swing.JSpinner(sm4);
        cbTime1 = new javax.swing.JCheckBox();
        cbTime2 = new javax.swing.JCheckBox();
        cbTime3 = new javax.swing.JCheckBox();
        cbTime4 = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Zeitenmanagement");

        jPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        jPanel1.setLayout(new java.awt.BorderLayout());

        pButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 0, 0, 0));
        pButton.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jPanel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jPanel5.setLayout(new java.awt.GridLayout(1, 0, 4, 0));

        btSpeichern.setText("Ok");
        btSpeichern.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onOk(evt);
            }
        });
        jPanel5.add(btSpeichern);

        btSchließen.setText("Abbrechen");
        btSchließen.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                onCancel(evt);
            }
        });
        jPanel5.add(btSchließen);

        jPanel4.add(jPanel5);

        pButton.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel1.add(pButton, java.awt.BorderLayout.SOUTH);

        pZeiten.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        pZeiten.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 16, 32));

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel10.setText("Zeit 2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(jLabel10, gridBagConstraints);

        jLabel2.setText("Zeiten");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(jLabel2, gridBagConstraints);

        jLabel8.setText("Zeit 1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(jLabel8, gridBagConstraints);

        jLabel11.setText("Zeit 3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(jLabel11, gridBagConstraints);

        jLabel12.setText("Zeit 4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Aktiv");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(jLabel13, gridBagConstraints);

        jLabel14.setText("Uhrzeit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 2);
        jPanel6.add(jLabel14, gridBagConstraints);

        spTime1.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spTime1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(spTime1, gridBagConstraints);

        spTime2.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spTime2StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(spTime2, gridBagConstraints);

        spTime3.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spTime3StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(spTime3, gridBagConstraints);

        spTime4.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spTime4StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(spTime4, gridBagConstraints);

        cbTime1.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                cbTime1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(cbTime1, gridBagConstraints);

        cbTime2.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                cbTime2StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(cbTime2, gridBagConstraints);

        cbTime3.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                cbTime3StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(cbTime3, gridBagConstraints);

        cbTime4.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                cbTime4StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        jPanel6.add(cbTime4, gridBagConstraints);

        jPanel2.add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setBorder(javax.swing.BorderFactory.createEmptyBorder(16, 1, 1, 1));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Es wird empholen die vier Fütterungszeiten über den ganzen Tag zu verteilen.");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        jPanel7.add(jLabel4, gridBagConstraints);

        jLabel1.setText("Weiters ist zu beachten, dass eine Fütterung nur gestart wird, wenn der Punkt in der Spalte aktiv gesetzt ist.");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(1, 0, 1, 0);
        jPanel7.add(jLabel1, gridBagConstraints);

        jPanel2.add(jPanel7, java.awt.BorderLayout.SOUTH);

        jPanel3.add(jPanel2);

        pZeiten.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel1.add(pZeiten, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onCancel(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onCancel
    {//GEN-HEADEREND:event_onCancel
        if (saved == false)
        {
            if (JOptionPane.showConfirmDialog(this, "Fenster wirklich schließen? Nicht gespeicherte Inhalte gehen verloren!",
                    "Hinweis", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            {
                dispose();
            }
        }
        else
        {
            timesChanged = true;

            dispose();
        }
    }//GEN-LAST:event_onCancel

    private void onOk(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onOk
    {//GEN-HEADEREND:event_onOk
        getValues();
        
        dispose();
    }//GEN-LAST:event_onOk

    private void spTime1StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spTime1StateChanged
    {//GEN-HEADEREND:event_spTime1StateChanged
        saved = false;
    }//GEN-LAST:event_spTime1StateChanged

    private void spTime2StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spTime2StateChanged
    {//GEN-HEADEREND:event_spTime2StateChanged
        saved = false;
    }//GEN-LAST:event_spTime2StateChanged

    private void spTime3StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spTime3StateChanged
    {//GEN-HEADEREND:event_spTime3StateChanged
        saved = false;
    }//GEN-LAST:event_spTime3StateChanged

    private void spTime4StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spTime4StateChanged
    {//GEN-HEADEREND:event_spTime4StateChanged
        saved = false;
    }//GEN-LAST:event_spTime4StateChanged

    private void cbTime1StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_cbTime1StateChanged
    {//GEN-HEADEREND:event_cbTime1StateChanged
        saved = false;
    }//GEN-LAST:event_cbTime1StateChanged

    private void cbTime2StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_cbTime2StateChanged
    {//GEN-HEADEREND:event_cbTime2StateChanged
        saved = false;
    }//GEN-LAST:event_cbTime2StateChanged

    private void cbTime3StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_cbTime3StateChanged
    {//GEN-HEADEREND:event_cbTime3StateChanged
        saved = false;
    }//GEN-LAST:event_cbTime3StateChanged

    private void cbTime4StateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_cbTime4StateChanged
    {//GEN-HEADEREND:event_cbTime4StateChanged
        saved = false;
    }//GEN-LAST:event_cbTime4StateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info
                    : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(TimeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(TimeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(TimeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(TimeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                TimeManagement dialog = new TimeManagement(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSchließen;
    private javax.swing.JButton btSpeichern;
    private javax.swing.JCheckBox cbTime1;
    private javax.swing.JCheckBox cbTime2;
    private javax.swing.JCheckBox cbTime3;
    private javax.swing.JCheckBox cbTime4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel pButton;
    private javax.swing.JPanel pZeiten;
    private javax.swing.JSpinner spTime1;
    private javax.swing.JSpinner spTime2;
    private javax.swing.JSpinner spTime3;
    private javax.swing.JSpinner spTime4;
    // End of variables declaration//GEN-END:variables

    public boolean isSaved()
    {
        return saved;
    }

    public BasicDBObject getNewTimeDoc()
    {
        return newTimeDoc;
    }
    
    private void fillSpinners()
    {
        JsonObject obj = MainWindow.getInstace().getTimes();

        Logger.getLogger("Times imported").log(Level.FINE, "Times imported");

        String time1 = obj.getString("time1");
        String time2 = obj.getString("time2");
        String time3 = obj.getString("time3");
        String time4 = obj.getString("time4");
        Boolean time1_active = obj.getBoolean("time1_active"); //time1 checkbox
        Boolean time2_active = obj.getBoolean("time2_active"); //time2 checkbox
        Boolean time3_active = obj.getBoolean("time3_active"); //time3 checkbox
        Boolean time4_active = obj.getBoolean("time4_active"); //time4 checkbox       

        Date date1 = null, date2 = null, date3 = null, date4 = null;

        DateFormat format = new SimpleDateFormat("HH:mm", Locale.GERMANY);
        try
        {
            date1 = format.parse(time1);
            date2 = format.parse(time2);
            date3 = format.parse(time3);
            date4 = format.parse(time4);
        }
        catch (ParseException ex)
        {
            Logger.getLogger(TimeManagement.class.getName()).log(Level.SEVERE, null, ex);
        }

        spTime1.setValue(date1);
        spTime2.setValue(date2);
        spTime3.setValue(date3);
        spTime4.setValue(date4);
        cbTime1.setSelected(time1_active);
        cbTime2.setSelected(time2_active);
        cbTime3.setSelected(time3_active);
        cbTime4.setSelected(time4_active);
    }

    private void getValues()
    {
        DateFormat df = new SimpleDateFormat("HH:mm");

        Date date1 = (Date) spTime1.getValue();
        String time1 = df.format(date1);

        Date date2 = (Date) spTime2.getValue();
        String time2 = df.format(date2);

        Date date3 = (Date) spTime3.getValue();
        String time3 = df.format(date3);

        Date date4 = (Date) spTime4.getValue();
        String time4 = df.format(date4);

        boolean time1_active = cbTime1.isSelected();
        boolean time2_active = cbTime2.isSelected();
        boolean time3_active = cbTime3.isSelected();
        boolean time4_active = cbTime4.isSelected();

        if (time1_active == false && time2_active == false && time3_active == false && time4_active == false)
        {
            JOptionPane.showMessageDialog(this, "Es muss mindestens eine Zeit aktiv sein!", "Fehler", ERROR_MESSAGE);
        }

        if (date1.equals(date2) || date1.equals(date3) || date1.equals(date4) || date2.equals(date3) || date2.equals(date4) || date3.equals(date4))
        {
            JOptionPane.showMessageDialog(this, "Es müssen 4 verschiedene Uhrzeiten gewählt werden!", "Fehler", ERROR_MESSAGE);
        }
        else
        {
            if (date1.after(date2) || date1.after(date3) || date1.after(date4) || date2.after(date3) || date2.after(date4) || date3.after(date4))
            {
                JOptionPane.showMessageDialog(this, "Die Uhrzeiten müssen in aufsteigender Reihenfolge angeordnet werden!", "Fehler", ERROR_MESSAGE);
            }
            else
            {
                newTimeDoc = new BasicDBObject("identifier", "Times")
                        .append("time1", time1)
                        .append("time1_active", time1_active)
                        .append("time2", time2)
                        .append("time2_active", time2_active)
                        .append("time3", time3)
                        .append("time3_active", time3_active)
                        .append("time4", time4)
                        .append("time4_active", time4_active);

                Logger.getLogger("Times saved").log(Level.FINE, "Times saved");

                saved = true;
            }
        }
    }
}
